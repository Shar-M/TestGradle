buildscript {
    repositories { jcenter() }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE"
        classpath 'org.springframework:springloaded:1.2.6.RELEASE'
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
    repositories {
        // Use jcenter for resolving your dependencies.
        // You can declare any Maven/Ivy/file repository here.
        jcenter()
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.3.RELEASE'
}
//group = 'springio'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'docker'
sourceCompatibility = 1.7
//mainClassName = 'org.tw.gradleTest.OddEven'
war {
    baseName = 'myapp'
}

//apply plugin: 'spring-boot'
// In this section you declare where to find the dependencies of your project

bootRun {
    addResources = true
}
springBoot {
    backupSource = false
}
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
configurations {
    dev
}
dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.thymeleaf:thymeleaf-spring4")
    compile("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect")

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
//    compile("org.springframework.boot:spring-boot-starter-web:1.5.3.RELEASE")

}

group = 'greendockerlady'
task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = war.baseName.toLowerCase()
    dockerfile = file('Dockerfile')
    doFirst {
        copy {
            from war.archivePath
            into stageDir
        }
    }
}

jar {
    manifest {
        attributes(
                "Manifest-Version": "1.0",
                "Class-Path": configurations.compile.collect { it.getName() }.join(' '),
                "Main-Class": "org.tw.gradleTest.OddEven"
        )
    }
}


idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}


task cool {
    doFirst {
        println war.archiveName
        println war.archivePath
    }
}